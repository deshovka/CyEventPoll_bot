import aiosqlite
import logging
from datetime import datetime, timedelta
from dateutil import parser
from aiogram import Bot, Router, F, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from pydantic import BaseModel, field_validator
from aiogram.client.default import DefaultBotProperties
from typing import Optional

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

BOT_TOKEN = ""
CHANNEL_ID = ""
ALLOWED_IDS = []

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
router = Router()

class Event(BaseModel):
    title: str
    description: str
    date: str
    image_id: Optional[str] = None

    @field_validator("title")
    def validate_title(cls, value):
        if len(value) > 100:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
        if len(value.strip()) == 0:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return value

    @field_validator("description")
    def validate_description(cls, value):
        if len(value) > 1000:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤")
        if len(value.strip()) == 0:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return value

    @field_validator("date")
    def validate_date(cls, value):
        try:
            parsed_date = parser.parse(value, dayfirst=True)
            if parsed_date < datetime.now():
                raise ValueError("–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return value
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

async def init_db():
    async with aiosqlite.connect("events.db") as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS events (
                event_id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT NOT NULL,
                date TEXT NOT NULL,
                image_id TEXT,
                message_id INTEGER,
                UNIQUE(title, date)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS participants (
                event_id INTEGER,
                user_id INTEGER,
                username TEXT,
                participation_status TEXT,
                PRIMARY KEY (event_id, user_id),
                FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE
            )
        ''')
        await db.execute('CREATE INDEX IF NOT EXISTS idx_participants_event_id ON participants(event_id)')
        await db.commit()

class EventCreation(StatesGroup):
    TITLE = State()
    DESCRIPTION = State()
    DATE = State()
    TIME = State()
    CUSTOM_TIME = State()
    IMAGE = State()

def check_access(user_id: int) -> bool:
    return user_id in ALLOWED_IDS

def start_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"), KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    buttons = []
    today = datetime.now()
    buttons.append([
        InlineKeyboardButton(text=f"{datetime(year, month, 1).strftime('%B %Y')}", callback_data="ignore"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"calendar_prev_{year}_{month}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"calendar_next_{year}_{month}")
    ])
    buttons.append([
        InlineKeyboardButton(text=day, callback_data="ignore") for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    ])
    first_day = datetime(year, month, 1)
    last_day = (datetime(year, month + 1, 1) - timedelta(days=1) if month < 12 else datetime(year + 1, 1, 1) - timedelta(days=1)).day
    weekday = first_day.weekday()
    week = []
    for _ in range(weekday):
        week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
    for day in range(1, last_day + 1):
        date = datetime(year, month, day)
        text = f"[{day}]" if date.date() == today.date() else str(day)
        week.append(InlineKeyboardButton(text=text, callback_data=f"date_{year}_{month}_{day}"))
        if len(week) == 7:
            buttons.append(week)
            week = []
    if week:
        while len(week) < 7:
            week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        buttons.append(week)
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_calendar")])
    logger.info(f"Generated calendar for {year}-{month}: {len(buttons)} rows")
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_time_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for hour in range(6, 24):  # From 6:00 to 23:30
        row = []
        for minute in [0, 30]:
            time_str = f"{hour:02d}:{minute:02d}"
            row.append(InlineKeyboardButton(text=time_str, callback_data=f"time_{time_str}"))
        buttons.append(row)
    for hour in range(0, 4):  # From 00:00 to 03:30
        row = []
        for minute in [0, 30]:
            time_str = f"{hour:02d}:{minute:02d}"
            row.append(InlineKeyboardButton(text=time_str, callback_data=f"time_{time_str}"))
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è", callback_data="custom_time")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_time")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(CommandStart())
async def start_command(message: Message):
    if not check_access(message.from_user.id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.reply(
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏!**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard()
    )

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    await message.reply("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())

@router.callback_query(F.data.in_(["cancel_calendar", "cancel_time"]))
async def cancel_calendar_time(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.reply("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
    await callback.answer()

@router.message(F.text.in_(["üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è"]))
async def process_action(message: Message, state: FSMContext):
    if not check_access(message.from_user.id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if message.text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await state.set_state(EventCreation.TITLE)
        await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=None)
    elif message.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è":
        await show_events(message)

@router.message(EventCreation.TITLE)
async def process_title(message: Message, state: FSMContext):
    try:
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")
        Event(title=message.text, description="test", date=tomorrow)  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –±—É–¥—É—â–µ–π –¥–∞—Ç–æ–π
        await state.update_data(title=message.text.strip())
        await state.set_state(EventCreation.DESCRIPTION)
        await message.reply("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
    except ValueError as e:
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(EventCreation.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    try:
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")
        Event(description=message.text, title="test", date=tomorrow)  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –±—É–¥—É—â–µ–π –¥–∞—Ç–æ–π
        await state.update_data(description=message.text.strip())
        await state.set_state(EventCreation.DATE)
        current_date = datetime.now()
        await message.reply(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=create_calendar(current_date.year, current_date.month)
        )
    except ValueError as e:
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data.startswith("calendar_"), EventCreation.DATE)
async def process_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError(f"Invalid callback data format: {callback.data}")
        _, action, year, month = parts
        year, month = int(year), int(month)
        logger.info(f"Navigating calendar: action={action}, year={year}, month={month}")

        if action == "prev":
            month -= 1
            if month == 0:
                month = 12
                year -= 1
        elif action == "next":
            month += 1
            if month == 13:
                month = 1
                year += 1
        if year < 1970 or year > 9999:
            raise ValueError(f"Invalid year: {year}")

        new_calendar = create_calendar(year, month)
        calendar_text = f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è ({datetime(year, month, 1).strftime('%B %Y')}):"

        new_message = await callback.message.answer(
            text=calendar_text,
            reply_markup=new_calendar
        )
        await state.update_data(calendar_message_id=new_message.message_id)
        await asyncio.sleep(0.1)
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"Failed to delete old calendar message: {delete_error}")

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()

@router.callback_query(F.data.startswith("date_"), EventCreation.DATE)
async def process_date_callback(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError("Invalid date callback data")
        _, year, month, day = parts
        date_str = f"{int(day):02d}.{int(month):02d}.{year}"
        try:
            parsed_date = datetime.strptime(date_str, "%d.%m.%Y")
            if parsed_date < datetime.now():
                raise ValueError("–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
        except ValueError as ve:
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {str(ve)}")
        await state.update_data(date=date_str)
        await state.set_state(EventCreation.TIME)
        new_message = await callback.message.answer(
            text="üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (6:00‚Äì3:00, –∏–Ω—Ç–µ—Ä–≤–∞–ª 30 –º–∏–Ω—É—Ç) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:33):",
            reply_markup=create_time_keyboard()
        )
        await state.update_data(time_message_id=new_message.message_id)
        await asyncio.sleep(0.1)
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"Failed to delete old calendar message: {delete_error}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {e}")
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()

@router.callback_query(F.data.startswith("time_"), EventCreation.TIME)
async def process_time_callback(callback: CallbackQuery, state: FSMContext):
    try:
        time_str = callback.data.replace("time_", "")
        data = await state.get_data()
        date_str = data["date"]
        full_date = f"{date_str} {time_str}"
        Event(date=full_date, title="test", description="test")  # –í–∞–ª–∏–¥–∞—Ü–∏—è
        await state.update_data(date=full_date)
        await state.set_state(EventCreation.IMAGE)
        new_message = await callback.message.answer(
            text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        await state.update_data(image_message_id=new_message.message_id)
        await asyncio.sleep(0.1)
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"Failed to delete old time message: {delete_error}")
        await callback.answer()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()

@router.callback_query(F.data == "custom_time", EventCreation.TIME)
async def request_custom_time(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EventCreation.CUSTOM_TIME)
    new_message = await callback.message.answer(
        text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:33):"
    )
    await state.update_data(custom_time_message_id=new_message.message_id)
    await asyncio.sleep(0.1)
    try:
        await callback.message.delete()
    except Exception as delete_error:
        logger.error(f"Failed to delete old time message: {delete_error}")
    await callback.answer()

@router.message(EventCreation.CUSTOM_TIME)
async def process_custom_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    try:
        parsed_time = datetime.strptime(time_str, "%H:%M")
        data = await state.get_data()
        date_str = data["date"]
        full_date = f"{date_str} {time_str}"
        Event(date=full_date, title="test", description="test")
        await state.update_data(date=full_date)
        await state.set_state(EventCreation.IMAGE)
        new_message = await message.answer(
            text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        await state.update_data(image_message_id=new_message.message_id)
        await message.delete()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:33).")

@router.message(F.photo, EventCreation.IMAGE)
async def process_image(message: Message, state: FSMContext):
    await state.update_data(image_id=message.photo[-1].file_id)
    await save_event(message, state)

@router.message(EventCreation.IMAGE, ~F.text.startswith("/"))  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/"
async def process_invalid_image(message: Message):
    await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip.")


@router.message(Command("skip"), EventCreation.IMAGE)
async def skip_image(message: Message, state: FSMContext):
    await state.update_data(image_id=None)
    await save_event(message, state)
    await message.delete()

async def save_event(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        event = Event(title=data["title"], description=data["description"], date=data["date"], image_id=data.get("image_id"))
        async with aiosqlite.connect("events.db") as db:
            try:
                cursor = await db.execute(
                    "INSERT INTO events (title, description, date, image_id) VALUES (?, ?, ?, ?)",
                    (event.title, event.description, event.date, event.image_id)
                )
                event_id = cursor.lastrowid
                await db.commit()
            except aiosqlite.IntegrityError:
                await message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await state.clear()
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –£—á–∞–≤—Å—Ç–≤—É—é", callback_data=f"join_{event_id}"),
                InlineKeyboardButton(text="‚ùå –£—á–∞–≤—Å—Ç–≤—É—é", callback_data=f"decline_{event_id}")
            ]])

            # Format title as bold and italic
            text = f"üìÖ **_{event.title}_**\n\n{event.description}\n\nüïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è**: {event.date}"
            if len(text) > 1024 and event.image_id:
                raise ValueError("–¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 1024 —Å–∏–º–≤–æ–ª–∞).")
            if len(text) > 4096 and not event.image_id:
                raise ValueError("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 4096 —Å–∏–º–≤–æ–ª–æ–≤).")

            try:
                if event.image_id:
                    message_sent = await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=event.image_id,
                        caption=text,
                        reply_markup=keyboard
                    )
                else:
                    message_sent = await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=text,
                        reply_markup=keyboard
                    )
                await db.execute("UPDATE events SET message_id = ? WHERE event_id = ?", (message_sent.message_id, event_id))
                await db.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞.")
                await db.execute("DELETE FROM events WHERE event_id = ?", (event_id,))
                await db.commit()
                return

        await message.reply("üéâ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=start_keyboard())
        await state.clear()
    except ValueError as e:
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        await message.reply("üéâ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=start_keyboard())
        await state.clear()
    except ValueError as e:
        error_msg = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def show_events(message: Message):
    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT event_id, title, date FROM events ORDER BY date")
        events = await cursor.fetchall()
        if not events:
            await message.reply("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìÖ {title} ({date})", callback_data=f"view_{event_id}")]
            for event_id, title, date in events
        ])
        await message.reply("üìã **–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ**:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("view_"))
async def view_event(callback: CallbackQuery):
    event_id = int(callback.data.replace("view_", ""))
    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT title, description, date FROM events WHERE event_id = ?", (event_id,))
        event = await cursor.fetchone()
        if not event:
            await callback.message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        title, description, date = event
        cursor = await db.execute(
            "SELECT username, participation_status FROM participants WHERE event_id = ? AND participation_status = '–£—á–∞—Å—Ç–≤—É—é'",
            (event_id,)
        )
        participants = await cursor.fetchall()
        participants_text = "\n".join(f"üë§ @{username}" for username, _ in participants) or "üö∂‚Äç‚ôÇÔ∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        text = f"üìÖ **{title}**\n\nüìù {description}\n\nüïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è**: {date}\n\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏**:\n{participants_text}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"delete_{event_id}")
        ]] if check_access(callback.from_user.id) else [])
        await callback.message.reply(text, reply_markup=keyboard)
        await callback.answer()

@router.callback_query(F.data.startswith("delete_"))
async def delete_event(callback: CallbackQuery):
    if not check_access(callback.from_user.id):
        await callback.message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    event_id = int(callback.data.replace("delete_", ""))
    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT message_id FROM events WHERE event_id = ?", (event_id,))
        event = await cursor.fetchone()
        if event and event[0]:
            try:
                await bot.delete_message(CHANNEL_ID, event[0])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await db.execute("DELETE FROM events WHERE event_id = ?", (event_id,))
        await db.commit()
    await callback.message.reply("üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()

@router.callback_query(F.data.startswith(("join_", "decline_")))
async def handle_participation(callback: CallbackQuery):
    action, event_id = callback.data.split("_")
    event_id = int(event_id)
    user_id = callback.from_user.id
    username = callback.from_user.username or callback.from_user.first_name
    new_status = "–£—á–∞—Å—Ç–≤—É—é" if action == "join" else "–ù–µ —É—á–∞—Å—Ç–≤—É—é"

    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT event_id FROM events WHERE event_id = ?", (event_id,))
        if not await cursor.fetchone():
            await callback.message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        cursor = await db.execute(
            "SELECT participation_status FROM participants WHERE event_id = ? AND user_id = ?",
            (event_id, user_id)
        )
        current_status = await cursor.fetchone()

        if current_status and current_status[0] == new_status:
            await callback.answer()
            return

        should_notify = (
            (current_status is None and action == "join") or
            (current_status and current_status[0] == "–£—á–∞—Å—Ç–≤—É—é" and action == "decline") or
            (current_status and current_status[0] == "–ù–µ —É—á–∞—Å—Ç–≤—É—é" and action == "join")
        )

        await db.execute(
            """
            INSERT OR REPLACE INTO participants (event_id, user_id, username, participation_status)
            VALUES (?, ?, ?, ?)
            """,
            (event_id, user_id, username, new_status)
        )
        await db.commit()

        if should_notify:
            await callback.message.reply(f"üë§ @{username} –æ—Ç–º–µ—Ç–∏–ª: {new_status}")

    await callback.answer()

@router.errors()
async def errors_handler(update, exception):
    logger.error(f"–û—à–∏–±–∫–∞: {exception}", exc_info=True)
    error_msg = str(exception).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`")[:200]
    if isinstance(update, Message):
        await update.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif isinstance(update, CallbackQuery):
        await update.message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return True

async def main():
    await init_db()
    dp = Dispatcher()
    dp.include_router(router)
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())