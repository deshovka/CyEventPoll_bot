import aiosqlite
import logging
import asyncio
from aiogram import Router, F
from aiogram import Bot
from collections import defaultdict
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import pytz
from configparser import ConfigParser
from models import Event
from keyboards import start_keyboard, create_calendar, create_time_keyboard
from states import EventCreation
from utils import check_access
import re

router = Router()
logger = logging.getLogger(__name__)
config = ConfigParser()
config.read("config.ini")
CHANNEL_ID = config["Bot"]["channel_id"]


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
participant_counts = defaultdict(lambda: {"join": 0, "decline": 0})
update_lock = asyncio.Lock()
pending_updates = defaultdict(list)

async def schedule_keyboard_update(event_id: int, join_count: int, decline_count: int, bot: Bot, message_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–±ouncing'–æ–º."""
    async with update_lock:
        pending_updates[event_id].append((join_count, decline_count))

        # –ñ–¥–µ–º 100 –º—Å –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await asyncio.sleep(0.1)
        if not pending_updates[event_id]:
            return

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        join_count, decline_count = pending_updates[event_id][-1]
        del pending_updates[event_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        participant_counts[event_id]["join"] = join_count
        participant_counts[event_id]["decline"] = decline_count

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=f"‚úÖ –£—á–∞—Å—Ç–≤—É—é ({join_count})",
                callback_data=f"join_{event_id}"
            ),
            InlineKeyboardButton(
                text=f"‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é ({decline_count})",
                callback_data=f"decline_{event_id}"
            )
        ]])

        # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(3):
            try:
                await bot.edit_message_reply_markup(
                    chat_id=CHANNEL_ID,
                    message_id=message_id,
                    reply_markup=keyboard
                )
                logger.info(f"Keyboard updated for event_id={event_id}, message_id={message_id}")
                return
            except Exception as e:
                logger.warning(f"Attempt {attempt + 1} failed to update keyboard: {e}")
                if attempt < 2:
                    await asyncio.sleep(0.2 * (2 ** attempt))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    logger.error(f"Failed to update keyboard after 3 attempts: {e}")

def escape_markdown(text: str) -> str:
    """Escape markdown-sensitive characters for Telegram MarkdownV2, preserving backslashes, usernames, and dates."""
    if not text:
        return text

    # Characters to escape (excluding \ to preserve backslashes in dates and usernames)
    characters = r'_*[]()~`>#+-=|{}!'

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ç–æ—á–µ–∫
    for char in characters:
        text = text.replace(char, f"\\{char}")

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (DD.MM.YYYY –∏–ª–∏ DD.MM.YYYY HH:MM)
    def escape_dots(match):
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if re.match(r'\d{1,2}\.\d{1,2}\.\d{4}(?:\s\d{1,2}:\d{2})?', match.group(0)):
            return match.group(0)
        # –ò–Ω–∞—á–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É
        return match.group(0).replace('.', r'\.')

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–µ–∫ —Ç–æ–ª—å–∫–æ –≤–Ω–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
    text = re.sub(r'\d*\.\d*\.\d*|\S*\.\S*', escape_dots, text)

    return text
@router.message(CommandStart())
async def start_command(message: Message, bot):
    if not check_access(message.from_user.id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.reply(
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏!**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard()
    )


@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    await message.reply("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())


@router.callback_query(F.data.in_(["cancel_calendar", "cancel_time"]))
async def cancel_calendar_time(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.reply("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
    await callback.answer()


@router.message(F.text.in_(["üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è"]))
async def process_action(message: Message, state: FSMContext):
    if not check_access(message.from_user.id):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if message.text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await state.set_state(EventCreation.TITLE)
        await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=None)
    elif message.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è":
        await show_events(message)


@router.message(EventCreation.TITLE)
async def process_title(message: Message, state: FSMContext):
    try:
        tomorrow = (datetime.now(pytz.timezone("EET")) + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")
        Event(title=message.text, description="test", date=tomorrow)
        await state.update_data(title=message.text.strip())
        await state.set_state(EventCreation.DESCRIPTION)
        await message.reply("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(EventCreation.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    try:
        tomorrow = (datetime.now(pytz.timezone("EET")) + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")
        Event(description=message.text, title="test", date=tomorrow)
        await state.update_data(description=message.text.strip())
        await state.set_state(EventCreation.DATE)
        current_date = datetime.now(pytz.timezone("EET"))
        # Use current_date.year and current_date.month instead of undefined year and month
        calendar_text = f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è ({escape_markdown(datetime(current_date.year, current_date.month, 1).strftime('%B %Y'))}):"
        await message.reply(
            calendar_text,
            reply_markup=create_calendar(current_date.year, current_date.month)
        )
    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data.startswith("calendar_"), EventCreation.DATE)
async def process_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError(f"Invalid callback data format: {callback.data}")
        _, action, year, month = parts
        year, month = int(year), int(month)
        logger.info(f"Navigating calendar: action={action}, year={year}, month={month}")

        if action == "prev":
            month -= 1
            if month == 0:
                month = 12
                year -= 1
        elif action == "next":
            month += 1
            if month == 13:
                month = 1
                year += 1
        if year < 1970 or year > 9999:
            raise ValueError(f"Invalid year: {year}")

        new_calendar = create_calendar(year, month)
        calendar_text = f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è ({escape_markdown(datetime(year, month, 1).strftime('%B %Y'))}):"

        new_message = await callback.message.answer(
            text=calendar_text,
            reply_markup=new_calendar
        )
        await state.update_data(calendar_message_id=new_message.message_id)
        await asyncio.sleep(0.1)
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"Failed to delete old calendar message: {delete_error}")

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()


@router.callback_query(F.data.startswith("date_"), EventCreation.DATE)
async def process_date_callback(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError("Invalid date callback data")
        _, year, month, day = parts
        date_str = f"{int(day):02d}.{int(month):02d}.{year}"
        tomorrow = (datetime.now(pytz.timezone("EET")) + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")
        Event(date=date_str + " 00:00", title="test", description="test")
        await state.update_data(date=date_str)
        await state.set_state(EventCreation.TIME)
        new_message = await callback.message.answer(
            text="üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (6:00‚Äì3:00, –∏–Ω—Ç–µ—Ä–≤–∞–ª 30 –º–∏–Ω—É—Ç) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:33):",
            reply_markup=create_time_keyboard()
        )
        await state.update_data(time_message_id=new_message.message_id)
        await asyncio.sleep(0.1)
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"Failed to delete old calendar message: {delete_error}")
        await callback.answer()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()


@router.callback_query(F.data.startswith("time_"), EventCreation.TIME)
async def process_time_callback(callback: CallbackQuery, state: FSMContext):
    try:
        time_str = callback.data.replace("time_", "")
        data = await state.get_data()
        date_str = data["date"]
        full_date = f"{date_str} {time_str}"
        Event(date=full_date, title="test", description="test")
        await state.update_data(date=full_date)
        await state.set_state(EventCreation.IMAGE)
        new_message = await callback.message.answer(
            text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        await state.update_data(image_message_id=new_message.message_id)
        await asyncio.sleep(0.1)
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"Failed to delete old time message: {delete_error}")
        await callback.answer()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()


@router.callback_query(F.data == "custom_time", EventCreation.TIME)
async def request_custom_time(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EventCreation.CUSTOM_TIME)
    new_message = await callback.message.answer(
        text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:33):"
    )
    await state.update_data(custom_time_message_id=new_message.message_id)
    await asyncio.sleep(0.1)
    try:
        await callback.message.delete()
    except Exception as delete_error:
        logger.error(f"Failed to delete old time message: {delete_error}")
    await callback.answer()


@router.message(EventCreation.CUSTOM_TIME)
async def process_custom_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    try:
        parsed_time = datetime.strptime(time_str, "%H:%M")
        data = await state.get_data()
        date_str = data["date"]
        full_date = f"{date_str} {time_str}"
        Event(date=full_date, title="test", description="test")
        await state.update_data(date=full_date)
        await state.set_state(EventCreation.IMAGE)
        new_message = await message.answer(
            text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        await state.update_data(image_message_id=new_message.message_id)
        await message.delete()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:33).")


@router.message(F.photo, EventCreation.IMAGE)
async def process_image(message: Message, state: FSMContext, bot):
    await state.update_data(image_id=message.photo[-1].file_id)
    await save_event(message, state, bot)


@router.message(EventCreation.IMAGE, ~F.text.startswith("/"))
async def process_invalid_image(message: Message):
    await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip.")


@router.message(Command("skip"), EventCreation.IMAGE)
async def skip_image(message: Message, state: FSMContext, bot):
    await state.update_data(image_id=None)
    await save_event(message, state, bot)
    await message.delete()


async def save_event(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    try:
        event = Event(title=data["title"], description=data["description"], date=data["date"],
                      image_id=data.get("image_id"))
        async with aiosqlite.connect("events.db") as db:
            try:
                cursor = await db.execute(
                    "INSERT INTO events (title, description, date, image_id) VALUES (?, ?, ?, ?)",
                    (event.title, event.description, event.date, event.image_id)
                )
                event_id = cursor.lastrowid
                await db.commit()
                logger.info(f"Event saved to DB, event_id={event_id}")
            except aiosqlite.IntegrityError:
                await message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await state.clear()
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –£—á–∞—Å—Ç–≤—É—é", callback_data=f"join_{event_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é", callback_data=f"decline_{event_id}")
            ]])

            text = f"üìÖ **{escape_markdown(event.title)}**\n\n{escape_markdown(event.description)}\n\nüïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è**: {escape_markdown(event.date)}"
            logger.info(f"Preparing to send to CHANNEL_ID={CHANNEL_ID}, text length={len(text)}")

            try:
                if event.image_id:
                    message_sent = await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=event.image_id,
                        caption=text,
                        reply_markup=keyboard
                    )
                else:
                    message_sent = await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=text,
                        reply_markup=keyboard
                    )
                logger.info(f"Message sent successfully, chat_id={CHANNEL_ID}, message_id={message_sent.message_id}")
                await db.execute("UPDATE events SET message_id = ? WHERE event_id = ?",
                                 (message_sent.message_id, event_id))
                await db.commit()
            except Exception as e:
                logger.error(f"Error sending to channel: {e}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞.")
                await db.execute("DELETE FROM events WHERE event_id = ?", (event_id,))
                await db.commit()
                return

        await message.reply("üéâ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=start_keyboard())
        await state.clear()
    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Error saving event: {e}")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {escape_markdown(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def show_events(message: Message):
    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT event_id, title, date FROM events ORDER BY date")
        events = await cursor.fetchall()
        if not events:
            await message.reply("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìÖ {escape_markdown(title)} ({escape_markdown(date)})",
                                  callback_data=f"view_{event_id}")]
            for event_id, title, date in events
        ])
        await message.reply("üìã **–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ**:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("view_"))
async def view_event(callback: CallbackQuery):
    event_id = int(callback.data.replace("view_", ""))
    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT title, description, date FROM events WHERE event_id = ?", (event_id,))
        event = await cursor.fetchone()
        if not event:
            await callback.message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        title, description, date = event

        # Escape markdown characters
        title = escape_markdown(title)
        description = escape_markdown(description)
        date = escape_markdown(date)

        cursor = await db.execute(
            "SELECT username, participation_status FROM participants WHERE event_id = ? AND participation_status = '–£—á–∞—Å—Ç–≤—É—é'",
            (event_id,)
        )
        participants = await cursor.fetchall()
        participants_text = "\n".join(
            f"üë§ @{escape_markdown(username)}" for username, _ in participants) or "üö∂‚Äç‚ôÇÔ∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

        text = f"üìÖ **{title}**\n\nüìù {description}\n\nüïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è**: {date}\n\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏**:\n{participants_text}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"delete_{event_id}")
        ]] if check_access(callback.from_user.id) else [])
        await callback.message.reply(text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("delete_"))
async def delete_event(callback: CallbackQuery, bot):
    if not check_access(callback.from_user.id):
        await callback.message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    event_id = int(callback.data.replace("delete_", ""))
    async with aiosqlite.connect("events.db") as db:
        cursor = await db.execute("SELECT message_id FROM events WHERE event_id = ?", (event_id,))
        event = await cursor.fetchone()
        if event and event[0]:
            try:
                await bot.delete_message(CHANNEL_ID, event[0])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await db.execute("DELETE FROM events WHERE event_id = ?", (event_id,))
        await db.commit()
    await callback.message.reply("üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data.startswith(("join_", "decline_")))
async def handle_participation(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ '–£—á–∞—Å—Ç–≤—É—é' –∏ '–ù–µ —É—á–∞—Å—Ç–≤—É—é' —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    action, event_id = callback.data.split("_")
    event_id = int(event_id)
    user_id = callback.from_user.id
    username = callback.from_user.username or callback.from_user.first_name
    new_status = "–£—á–∞—Å—Ç–≤—É—é" if action == "join" else "–ù–µ —É—á–∞—Å—Ç–≤—É—é"

    try:
        async with aiosqlite.connect("events.db") as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º message_id
            async with db.execute(
                    "SELECT message_id FROM events WHERE event_id = ?",
                    (event_id,)
            ) as cursor:
                event = await cursor.fetchone()
                if not event:
                    await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                    return
                message_id = event[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute(
                    "SELECT participation_status FROM participants WHERE event_id = ? AND user_id = ?",
                    (event_id, user_id)
            ) as cursor:
                current_status = await cursor.fetchone()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if current_status and current_status[0] == new_status:
                await callback.answer(
                    f"‚ÑπÔ∏è –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏: {new_status}.",
                    show_alert=True
                )
                return
            if action == "decline" and not current_status:
                await callback.answer(
                    "‚ÑπÔ∏è –í—ã –µ—â—ë –Ω–µ –±—ã–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.",
                    show_alert=True
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
            await db.execute(
                """
                INSERT OR REPLACE INTO participants (event_id, user_id, username, participation_status)
                VALUES (?, ?, ?, ?)
                """,
                (event_id, user_id, username, new_status)
            )

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            async with db.execute(
                    """
                    SELECT participation_status, COUNT(*)
                    FROM participants
                    WHERE event_id = ?
                    GROUP BY participation_status
                    """,
                    (event_id,)
            ) as cursor:
                counts = {status: count for status, count in await cursor.fetchall()}

            join_count = counts.get("–£—á–∞—Å—Ç–≤—É—é", 0)
            decline_count = counts.get("–ù–µ —É—á–∞—Å—Ç–≤—É—é", 0)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            await db.commit()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await schedule_keyboard_update(event_id, join_count, decline_count, bot, message_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏–º–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        should_notify = (
            (current_status is None and action == "join") or
            (current_status and current_status[0] == "–£—á–∞—Å—Ç–≤—É—é" and action == "decline") or
            (current_status and current_status[0] == "–ù–µ —É—á–∞—Å—Ç–≤—É—é" and action == "join")
        )
        if should_notify:
            logger.info(f"User @{username} changed status to {new_status} for event_id={event_id}")
            await callback.answer(
                f"‚ÑπÔ∏è –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏: {new_status}.",
                show_alert=True
            )

    except Exception as e:
        logger.error(f"Error in handle_participation: {e}", exc_info=True)
        await callback.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown(str(e))[:100]}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )


@router.errors()
async def errors_handler(update, exception=None):
    logger.error(f"–û—à–∏–±–∫–∞: {exception}", exc_info=True)
    error_msg = escape_markdown(str(exception)[:200] if exception else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    if isinstance(update, Message):
        await update.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif isinstance(update, CallbackQuery):
        await update.message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return True